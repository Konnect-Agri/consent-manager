version: '3'

services:
  shortdb:
    container_name: db
    image: postgres:12
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
    ports:
      - 5432:5432
    volumes:
      - ./scripts/1-init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./pgdata:/var/lib/postgresql/data

  gql:
    image: hasura/graphql-engine:v2.7.0
    ports:
      - 15003:8080
    env_file:
      - .env
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
    depends_on:
      - shortdb
    restart: always

  cache:
    container_name: cache
    restart: always
    image: redis:latest
    ports:
      - "6381:6379"
    command: [ "redis-server", "--appendonly", "yes" ]
    hostname: redis
    volumes:
      - ./redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf

  redis-ui:
    container_name: redis-ui
    image: redislabs/redisinsight:latest
    restart: always
    volumes:
      - redisinsight:/db
    ports:
      - 8088:8001

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - rabbitmq_go_net

  authentication:
    image: authentication
    build:
      context: .
      dockerfile: apps/authentication/Dockerfile
    env_file:
      - .env
    ports:
      - 6000:6000

  consent-manager:
    image: consent-manager
    build:
      context: .
      dockerfile: apps/consent-manager/Dockerfile
    env_file:
      - .env
    ports:
      - 3333:3333
    networks:
      - rabbitmq_go_net
  
  gatekeeper:
    image: gatekeeper
    build:
      context: .
      dockerfile: apps/gatekeeper/Dockerfile
    env_file:
      - .env
    ports:
      - 3000:3000
  
  resolver:
    image: resolver
    build:
      context: .
      dockerfile: apps/resolver/Dockerfile
    env_file:
      - .env
    ports:
      - 3001:3001
  
networks:
  rabbitmq_go_net:
    driver: bridge

volumes:
  redisinsight:
    driver: local